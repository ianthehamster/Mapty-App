'use strict';

class Workout {
  date = new Date(); // to get current date of workout

  id = (Date.now() + '').slice(-10); // all objects should have a unique id identifier! Date.now() gives current timestamp of right now

  clicks = 0;

  constructor(coords, distance, duration) {
    // data common to both running and cycling: coords, distance, duration
    this.coords = coords; // [lat, lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }

  _setDescription() {
    const months = [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December',
    ];

    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }

  click() {
    this.clicks++;
  }
}

class Running extends Workout {
  type = 'running';

  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration); // initializes this keyword
    this.cadence = cadence;

    // we can call an function in the constructor
    this.calcPace(); // immediately calculates pace when called by 'new'
    this._setDescription(); // when a new object is created, the description is set
  }

  calcPace() {
    // min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

class Cycling extends Workout {
  type = 'cycling'; // public field available on all instances objects

  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;

    this.calcSpeed();
    this._setDescription(); // when a new object is created, the description is set
  }

  calcSpeed() {
    // km/h
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

// const run1 = new Running([39, -12], 5.2, 24, 178);
// const cycling1 = new Cycling([39, -12], 27, 95, 523);

// console.log(run1, cycling1);

//////////////////////////
// APPLICATION ARCHITECTURE

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputCadence = document.querySelector('.form__input--cadence');
const inputElevation = document.querySelector('.form__input--elevation');

class App {
  #map;
  #mapZoomLevel = 13;
  #mapEvent;
  #workouts = [];

  constructor() {
    // Get user's position
    this._getPosition();

    // Get data from local storage
    this._getLocalStorage();

    // Attach event handlers
    form.addEventListener('submit', this._newWorkout.bind(this));
    inputType.addEventListener('change', this._toggleElevationField);
    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));
  }

  _getPosition() {
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        function () {
          alert('Could not get your position');
        }
      );
    // JS will call this._loadMap callback function and pass in position argument as soon as current position of user is determined
  }

  _loadMap(position) {
    // we use destructuring to create latitude and longitutde variable based on the latitude property of position
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    console.log(
      `https://www.google.com/maps/@${latitude},${longitude},15z?entry=ttu`
    );

    const coords = [latitude, longitude];

    this.#map = L.map('map').setView(coords, this.#mapZoomLevel); // the second parameter is the zoom value of the map
    // console.log(map);

    // L is a global variable that can be accessed from the leaflet js file into our script js file
    // leaflet js CANNOT access anything from script js since it is before script.js in the html file

    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    // map object is generated by leaflet (as seen in line 27, L,map) & on method (Event Listener) is coming from leaflet library, not javascript

    // Handling clicks on map
    this.#map.on('click', this._showForm.bind(this));

    this.#workouts.forEach(work => {
      this._renderWorkoutMarker(work);
    });
  }

  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _hideForm() {
    // Empty inputs
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        '';

    form.style.display = 'none';
    form.classList.add('hidden');

    // set display from none to grid to remove the animation that happens when form is hidden
    setTimeout(() => (form.style.display = 'grid'), 1000);
  }

  _toggleElevationField() {
    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');
    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');

    /** By toggling the same class, form__row--hidden, on both inputElevation and inputCadence, we make sure that one alwas remains hidden and the other is visible */
  }

  _newWorkout(e) {
    const validInputs = (...inputs) =>
      inputs.every(inp => Number.isFinite(inp));
    // rest parameter, ..., gives us an array, inputs
    // loops over input array and checks if the number is finite or not
    // "every" method only returns true if all the loop iterations are true (i.e., are number data types)

    const allPositive = (...inputs) => inputs.every(inp => inp > 0);

    e.preventDefault(); // to prevent page from reloading!

    // Get data from the inputted form
    const type = inputType.value; // 2 values of "running" and "cycling", whichever the user selects in the UI
    const distance = +inputDistance.value; // + converts string to a number data type
    const duration = +inputDuration.value;

    // lat and lng variables based on latlng object
    const { lat, lng } = this.#mapEvent.latlng;

    let workout;

    // If workout is running, create running object
    if (type === 'running') {
      const cadence = +inputCadence.value;

      // Check if data is valid using a guard clause
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(cadence)
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence) // this determines if any of the inputted fields are not numbers
      )
        return alert('Inputs have to be positive numbers!');
      // guard clause checks for opposite of what we want, if opposite is true, we return the function immediately

      // redefine workout variable from global scope
      workout = new Running([lat, lng], distance, duration, cadence);
    }

    // If workout is cycling, create cycling object
    if (type === 'cycling') {
      const elevation = +inputElevation.value;

      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration)
      )
        return alert('Inputs have to be positive numbers!');

      workout = new Cycling([lat, lng], distance, duration, elevation);
    }

    // Add new object to workout array (push method)
    this.#workouts.push(workout);

    // Render workout on map as a marker
    this._renderWorkoutMarker(workout);

    // Render workout on list
    this._renderWorkout(workout); // delegate functionality to method below

    // Hide the form and clear input fields after pressing submit
    this._hideForm();

    // Set local storage to all workouts
    this._setLocalStorage();
  }

  _renderWorkoutMarker(workout) {
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`, // dynamically changes css class between running and cycling to change color
        })
      )
      .setPopupContent(
        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`
      )
      .openPopup();
  }
  _renderWorkout(workout) {
    let html = `
    <li class="workout workout--${workout.type}" data-id="${workout.id}">
          <h2 class="workout__title">${workout.description}</h2>
          <div class="workout__details">
            <span class="workout__icon">${
              workout.name === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'
            }</span>
            <span class="workout__value">${workout.distance}</span>
            <span class="workout__unit">km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚è±</span>
            <span class="workout__value">${workout.duration}</span>
            <span class="workout__unit">min</span>
          </div>
    `;

    if (workout.type === 'running')
      html += `
    <div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.pace.toFixed(1)}</span>
            <span class="workout__unit">min/km</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">${workout.cadence}</span>
            <span class="workout__unit">spm</span>
          </div>
        </li>`;

    if (workout.type === 'cycling')
      html += `<div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.speed.toFixed(1)}</span>
            <span class="workout__unit">km/h</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">${workout.elevationGain}</span>
            <span class="workout__unit">m</span>
          </div>
        </li>`;

    form.insertAdjacentHTML('afterend', html); // add html element to sibling element, form, at the end of form element
  }

  _moveToPopup(e) {
    // any html element clicked that contains the workout class will automatically point to the li element with workout class
    const workoutEl = e.target.closest('.workout');

    // workoutEl will show the li element with a unique data-id -> used to find the workout in the workout array!
    // Builds bridge between UI and the data in the javascript

    // guard clause
    if (!workoutEl) return;

    const workout = this.#workouts.find(
      work => work.id === workoutEl.dataset.id
    );
    // find method find an element of the array

    // setView() method from Leaflet library (READ LEAFLET DOCUMENTATION!)
    this.#map.setView(workout.coords, this.#mapZoomLevel, {
      animate: true,
      pan: {
        duration: 1,
      },
    });

    // Using the public interface
    // workout.click();
    // objects coming from local storage will not inherit the methods they did before they were converted using JSON methods
  }

  // local storage method (only use for simple applications for small amounts of data!)
  _setLocalStorage() {
    // no parameters needed as we get the workouts from the workout property
    localStorage.setItem('workouts', JSON.stringify(this.#workouts));
    /** localStorage is a key/value store -> the value must be a string
     * JSON.stringify convers objects to string
     */
  }

  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem('workouts')); // JSON.parse converts string back into array/objects

    if (!data) return;

    this.#workouts = data; // _getLocalStorage is going to be executed at the start so workouts array will be empty
    // if we had some data in localStorage, we set workouts array to stored data

    this.#workouts.forEach(work => {
      this._renderWorkout(work);
    });
  }

  // delete workouts stored in localStorage
  reset() {
    localStorage.removeItem('workouts');

    // reload the page automatically
    // location is an object that contains browser properties and methods
    location.reload();
  }
}

/** getCurrentPosition() has two arguments, being two callback functions
 * 1. callback function on success (i.e., whenever the browser successfully gets the correct coordinates of the user)
 * 2. callback function on error (i.e., error in getting user coordinates)
 */

const app = new App(); // we use "new" to build a new object, app
